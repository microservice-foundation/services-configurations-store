# service configuration
server.port: 0

# multipart configuration
spring:
  r2dbc:
    url: r2dbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${DATABASE_NAME:resource_service}
    username: ${POSTGRES_USERNAME:microservice_foundation}
    password: ${POSTGRES_PASSWORD:microservice_foundation}
    initialization-mode: always
    pool:
      enabled: true
      initial-size: 5
      max-size: 10
  kafka:
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_ENDPOINTS:localhost:9091,localhost:9092,localhost:9093}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      enable-idempotence: true
      acks: all
      max-in-flight-requests-per-connection: 5
      transactional-id: tx-
      retries: 99999
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_ENDPOINTS:localhost:9091,localhost:9092,localhost:9093}
      client-id: ${spring.application.name}-consumer
      group-id: ${spring.application.name}-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: "latest"
      enable-auto-commit: false
      isolation-level: read_committed
      properties:
        spring.json.trusted.packages: com.epam.training.microservicefoundation.resourceservice.model
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.epam.training.microservicefoundation.resourceservice.model.event.ResourceProcessedEvent
      retry:
        backoff:
          interval: 1000
          multiplier: 2
          max-retries: 3
  cloud:
    config:
      retry:
        initialInterval: 1000
        maxInterval: 2000
        multiplier: 1.1
        maxAttempts: 3

# cloud configuration
aws:
  s3:
    endpoint: ${AWS_S3_URL:https://s3.amazonaws.com/}
    maxRetry: 3

# kafka configuration
kafka:
  topic:
    resource-staging: resource-staging
    resource-permanent: resource-permanent
    properties:
      partition-count: 3
      replication-factor: 3

# client configuration
api-gateway.service.name: ${API_GATEWAY_SERVICE_NAME:api-gateway-service}
web-client:
  connection-timeout: 5000
  response-timeout: 5000
  read-timeout: 5000
  write-timeout: 5000
  base-url: lb://${api-gateway.service.name}

# circuit breaker configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        allowHealthIndicatorToFail: false
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 3
        waitDurationInOpenState: 5000
        failureRateThreshold: 60
        permittedNumberOfCallsInHalfOpenState: 2
        slowCallDurationThreshold: 5000
        slowCallRateThreshold: 60
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
          - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
          - org.springframework.web.reactive.function.client.WebClientResponseException.BadGateway
          - org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout
          - java.io.IOException
        ignoreExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException.BadRequest
          - org.springframework.web.reactive.function.client.WebClientResponseException.NotFound
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: false

